{"ast":null,"code":"var _jsxFileName = \"/Users/erikahuszar/my-app/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './PathfindingVisualizer.css';\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, nodes.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 12\n        }\n      }, row.map((node, nodeIdx) => {\n        return;\n\n        /*#__PURE__*/\n        React.createElement(Node, {\n          key: nodeIdx,\n          isStart: true,\n          test: 'foo',\n          test: 'kappa',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 16\n          }\n        });\n      }));\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/erikahuszar/my-app/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","currentNode","push","setState","render","console","log","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,6BAAP;AAEA,eAAe,MAAMC,qBAAN,SAAoCF,SAApC,CAA6C;AAC1DG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAC;AADK,KAAb;AAGD;;AACHC,EAAAA,iBAAiB,GAAE;AACjB,UAAMD,KAAK,GAAE,EAAb;;AACA,SAAI,IAAIE,GAAG,GAAC,CAAZ,EAAeA,GAAG,GAAG,EAArB,EAAyBA,GAAG,EAA5B,EAA+B;AAC7B,YAAMC,UAAU,GAAC,EAAjB;;AACA,WAAI,IAAIC,GAAG,GAAE,CAAb,EAAgBA,GAAG,GAAG,EAAtB,EAA0BA,GAAG,EAA7B,EAAgC;AAC9B,cAAMC,WAAW,GAAG;AAClBD,UAAAA,GADkB;AAElBF,UAAAA;AAFkB,SAApB;AAIAC,QAAAA,UAAU,CAACG,IAAX,CAAgBD,WAAhB;AACD;;AACDL,MAAAA,KAAK,CAACM,IAAN,CAAWH,UAAX;AACD;;AACD,SAAKI,QAAL,CAAc;AAACP,MAAAA;AAAD,KAAd;AACD;;AACCQ,EAAAA,MAAM,GAAE;AACN,UAAM;AAACR,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KAAK,CAACW,GAAN,CAAU,CAACT,GAAD,EAAKU,MAAL,KAAgB;AACzB,0BACC;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACAV,GAAG,CAACS,GAAJ,CAAQ,CAACE,IAAD,EAAOC,OAAP,KAAmB;AACxB;;AACC;AAAA,4BAAC,IAAD;AACE,UAAA,GAAG,EAAGA,OADR;AAEG,UAAA,OAAO,EAAE,IAFZ;AAGG,UAAA,IAAI,EAAE,KAHT;AAIG,UAAA,IAAI,EAAE,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMF,OARF,CADA,CADD;AAaH,KAdE,CADH,CADF;AAmBH;;AA7C2D","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\n\nimport './PathfindingVisualizer.css';\n\nexport default class PathfindingVisualizer extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      nodes:[],\n    };\n  }\ncomponentDidMount(){\n  const nodes =[];\n  for(let row=0; row < 20; row++){\n    const currentRow=[];\n    for(let col =0; col < 50; col++){\n      const currentNode = {\n        col,\n        row,\n      };\n      currentRow.push(currentNode);\n    }\n    nodes.push(currentRow);\n  }\n  this.setState({nodes})\n}\n  render(){\n    const {nodes} = this.state;\n    console.log(nodes)\n\n    return(\n      <div className=\"grid\">\n        {nodes.map((row,rowIdx) => {\n          return(\n           <div key={rowIdx}>\n          {row.map((node, nodeIdx) => {\n              return\n               <Node\n                 key ={nodeIdx}\n                  isStart={true}\n                  test={'foo'}\n                  test={'kappa'}></Node>\n              \n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n}\n"]},"metadata":{},"sourceType":"module"}